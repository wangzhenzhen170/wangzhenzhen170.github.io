(function () {
    var emx = angular.module('ExtandMx');

    emx.factory('emxScriptByDataEffect', ['_emxBaseSvg','$timeout', function (baseSvg, $timeout) {

        /*************************************************************************************************************************/

        /**
         * 角标效果
         */
        return baseSvg.extend({

            /**
             * 初始化
             * @param {Object} mxg - Graph
             * @param {Number} cellSize - 元素尺寸，用于决定角标的大小默认为80，角标半径为 cellSize / 5
             */
            init: function (mxg, cellSize) {
                this._super(mxg);

                if(!mxg){
                    return;
                }

                this.cellSize = cellSize || 80;

                // 定义一个高斯模糊
                this._blur = this._defGaussianBlur(1);
                this._gradient = this._defLinearGradient('superscript_cover', [['0%', 'white', '0.4'], ['100%', 'white', '0']],
                    true);
                this.image = mxg.expandedImage;
                this.mxg = mxg;
            },

            /**
             * 为cell创建角标效果
             * @param {Array<mxCell|String>} cells
             * @param {String=gray} color - 颜色
             * @param {String} text - 角标内容
             */
            createEffect: function (cells, color, text) {
                cells = cells instanceof Array ? cells : [cells];
                color = color || 'gray';
                text = text || "";
                var _this = this;

                var i, cell, node, geo, txt, bbox;

                for (i in cells) {
                    cell = this.getCell(cells[i]);
                    // geo = this.getCellGeo(cell);
                    node = this.cellEffects[cell.id];
                    if (!node) {
                        node = this.createSvg('g', {
                            'class': 'uEffect effect-script pointer'
                        });

                        this.cellEffects[cell.id] = node;

                        node.appendChild(this.createSvg('rect', {
                            stroke: '#ddd'
                        })); // , {filter: 'url(#' + this._blur + ')'}
                        // 渐变
                        // node.appendChild(this.createSvg('rect', {
                        //     fill: 'url(#' + this._gradient + ')',
                        //     stroke: 'rgba(255, 255, 255, 0.13)',
                        //     'data-cellid': cell.id
                        // }));
                        node.appendChild(this.createSvg('text', {
                            fill: '#959595',
                            'dominant-baseline': 'middle',
                            'font-family': 'sans-serif',
                            'font-weight': 'bold',
                            'data-cellid': cell.id
                        }));

                        node.appendChild(this.createSvg('image', {
                            width: _this.image.width,
                            height: _this.image.height,
                            // 'xlink:href': _this.image.src
                        }));
                    }
                    txt = node.getElementsByTagName('text')[0];
                    txt.textContent = text;
                    var image = node.getElementsByTagName('image')[0];
                    !image.setAttributeNS ? image.setAttribute("xlink:href", this.src) : image.setAttributeNS(mxConstants.NS_XLINK, "xlink:href", this.image.src);

                    //            this._placeNode(node, cell);
                    //
                    //            bbox = txt.getBBox();
                    //            this.attr(txt, {
                    //                x: geo.x + geo.width / 4 * 3 - bbox.width / 2,
                    //                y: geo.y + geo.width / 4 + bbox.height / 2
                    //            });

                    (function(node, _this, cell){
                        $timeout(function(){
                            var r;
                            r = _this.cellSize * _this.getViewScale() / 6;
                            r = Math.max(r, 8);
                            var textLength = node.getElementsByTagName('text')[0].getComputedTextLength();
                            _this.attr(node.getElementsByTagName('rect')[0], {
                                width: textLength + 20,
                                height: 25
                            });
                            _this.mxg.refresh(cell);
                        });
                    })(node, this, cell);
                    // $timeout(function(){
                    // });

                    this.syncEffect(cell);
                    this.attr(node.getElementsByTagName('rect')[0], {
                        fill: color,
                        'stroke-width': 1,
                        rx: 2,
                        ry: 2
                    });

                    this.pushToCell(cell);
                }
            },

            _placeNode: function (node, cell) {
                this.toCellFront(node, cell);
            },

            syncEffect: function (cell) {
                this._super(cell);
                var _this = this;

                var node = this.getEffectNode(cell),
                    state = this.getCellState(cell),
                    geo, txt, bbox, cx, cy, r;
                if (node && state) {
                    geo = this.getCellGeo(cell);
                    // 半径
                    r = this.cellSize * this.getViewScale() / 6;
                    r = Math.max(r, 8);
                    // 计算圆心位置
                    cx = geo.x + geo.width; // - r / 2;
                    cy = geo.y; // + r / 2;
                    txt = node.getElementsByTagName('text')[0];
                    bbox = txt.getBBox();

                    // console.log(node.getElementsByTagName('text'));




                    // console.log(node.getElementsByTagName('text')[0].getComputedTextLength());
                    _this.attr(node.getElementsByTagName('rect')[0], {
                        // rx: textLength / 2,
                        // ry: r,
                        // cx: cx + (textLength / 2),
                        // cy: cy + 8,
                        // rx: 8,
                        // ry: 8,
                        // 'stroke-width': r / 6,
                        x: cx - bbox.width / 2,
                        y: cy - 20
                        // width: textLength + 13,
                        // height: r + 3
                    });

                    var width = node.getElementsByTagName('rect')[0].getAttribute('width');
                    this.attr(node.getElementsByTagName('image')[0], {
                        // fill: color,
                        // 'stroke-width': 1,
                        x: cx - bbox.width / 2 + width / 2 - _this.image.width / 2,
                        y: cy - 5
                    });
                    // 先要把标签插入文档才能用getBBox获取值
                    _this._placeNode(node, cell);

                    _this.attr(txt, {
                        x: cx - bbox.width / 2 + 10,
                        y: cy - 10 // + bbox.height / 2
                    });
                }
            },

            onTransform: function () {
                this.syncAllEffect();
            },

            onChange: function () {
                this.syncAllEffect();
            },

            // 执行动画时的每帧更新
            update: function (t) {
                this._animate_lasttime_ = this._animate_lasttime_ ? this._animate_lasttime_ : t;
                var diff = t - this._animate_lasttime_;
                if (diff > this._animate_duration_ || diff < 0) {
                    this._animate_lasttime_ = t;
                    diff = 0;
                }
                if (diff >= 0) {
                    var half = this._animate_duration_ / 2,
                        efs = this.cellEffects,
                        i, node;
                    for (i in efs) {
                        node = efs[i];
                        node && this.attr(node, {
                            opacity: Math.abs(diff - half) / half
                        });
                    }

                }


                //        this._animate_lasttime_ = t;
            },

            /**
             * 获取角标内容
             * @param {mxCell|String} cell
             */
            getTextContent: function (cell) {
                var node = this.getEffectNode(cell);
                if (node) {
                    return node.getElementsByTagName('text')[0].textContent;
                }
            },

            hide: function (cell) {
                var node = this.getEffectNode(cell);
                if (node) {
                    this.attr(node, 'visibility', 'hidden');
                }
            },

            show: function (cell) {
                var node = this.getEffectNode(cell);
                if (node) {
                    this.attr(node, 'visibility', 'visible');
                }
            }
        });


    }]);
})();


(function (graph) {

    'use strict';

    graph.app.controller('eventSurveyCtrl', ['$scope', '$state', '$timeout', 'MonitoringService', '$uibModal', 'Unit', 'uDialog', '$stateParams', function ($scope, $state, $timeout, MonitoringService, $uibModal, Unit, uDialog, $stateParams) {
        //没有告警时等级颜色
        $scope.severitylists = [];
        $scope.parmSerity = [];
        $scope.allSeritey = [];
        $scope.ciApplication = [];
        $scope.noEventColor = '#81D925';
        $scope.openLevelFlag = false;
        $scope.selectAllFlag = false;
        $scope.shapes = ['&#xe673', '&#xe672', '&#xe671', '&#xe670', '&#xe66f'];
        //最近两小时
        $scope.endTime = Date.parse(new Date());
        $scope.startTime = Date.parse(new Date(new Date().getTime() - 60 * 60 * 2 * 1000));
        //当前时间
        $scope.time = Unit.unixToDatetime(new Date().getTime());
        try {
            $scope.colorObj = JSON.parse(localStorage.getItem('colorkey'));
            if ($scope.colorObj !== null && typeof $scope.colorObj === 'object' && Array.isArray($scope.colorObj.data)) {
                $scope.colorObjAry = {};
                $scope.colorObjData = $scope.colorObj.data;
                $scope.colorObj.data.forEach(function (val, index) {
                    $scope.colorObjAry[val.severity] = val.color;
                });
            }
        } catch (error) {
            console.log(error)
        };

        //等级list
        $scope.getSerietList = function () {
            MonitoringService.severitylist({}).success(function (result) {
                if (Array.isArray(result.data) && result.data.length) {
                    $scope.severitylists = result.data;
                    $scope.severitylists.forEach(function (val, index) {
                        if (index === 0 || index === 1) {
                            val.selected = true;
                            $scope.parmSerity.push(val.severity);
                        }
                        $scope.allSeritey.push(val.severity);
                    })
                    $scope.OverviewHour();
                    $scope.switchTimeLine();
                }

            }).error(function (error) {
                console.log(error);
            });
        }
        $scope.getSerietList();
        //点击等级筛选
        $scope.getSeritys = function (item) {
            if (item !== null && typeof item === 'object') {
                item.selected = !item.selected;
                var index = $scope.parmSerity.indexOf(item.severity);
                if (index > -1) {
                    $scope.parmSerity.splice(index, 1);
                } else {
                    $scope.parmSerity.push(item.severity);
                }
                $scope.selectAllFlag = $scope.parmSerity.length === $scope.severitylists.length
            } else {
                $scope.parmSerity = $scope.selectAllFlag ? [] : $scope.allSeritey;
                $scope.selectAllFlag = !$scope.selectAllFlag;
                $scope.severitylists.forEach(function (val, index) {
                    val.selected = $scope.selectAllFlag;
                })
            }
            $scope.OverviewHour();
            $scope.switchTimeLine();
        }
        //层次list
        $scope.getTimeAxisLevel = function () {
            MonitoringService.getTimeAxisLevel().success(function (result) {
                $scope.levels = result.data;
                $scope.levelObj = {};
                $scope.levels.forEach(function (val, index) {
                    $scope.levelObj[val] = $scope.shapes[index];
                });
            }).error(function (error) {
                console.log(error);
            });
        };
        $scope.getTimeAxisLevel();
        //应用概览
        $scope.OverviewHour = function () {
            $scope.loadAllView = true;
            var parms = {
                severity: $scope.parmSerity
            }

            MonitoringService.queryLatest2HourAppOverview(parms).success(function (result) {
                $scope.appOverview = result.data;
                if (Array.isArray($scope.appOverview) && $scope.appOverview.length) {
                    $scope.appOverview.forEach(function (app) {
                        app.barData.forEach(function (val) {
                            val.color = val.maxSeverity === -1 ? $scope.noEventColor : $scope.colorObjAry[val.maxSeverity];
                            val.percent = ((val.appCount / app.maxNumber) * 0.6 + 0.4) * 100;
                            // if (val.appCount === 0) {
                            //     val.percent = 40;
                            // } else if (val.appCount <= 20) {
                            //     val.percent = 70;
                            // } else {
                            //     val.percent = 100;
                            // }
                            val.empertyPercent = 100 - val.percent;
                        });

                    });
                    console.log($scope.appOverview);

                }
                $scope.loadAllView = false;
            }).error(function (error) {
                console.log(error);
            });
        }
        //分层模式
        $scope.openLevel = function () {
            $scope.openLevelFlag = !$scope.openLevelFlag;
            $scope.switchTimeLine();
        };
        $scope.switchTimeLine = function () {
            if (!$scope.openLevelFlag) {
                $scope.getSequential();
            }
        }
        $scope.overCard = function (item) {
            item.canSelect = true;
        }
        $scope.leaveCard = function (item) {
            item.canSelect = false;
        }
        $scope.overBar = function (bar) {
            bar.showHover = true;
        }
        $scope.leaveBar = function (bar) {
            bar.showHover = false;
        }
        //应用概览筛选时光轴
        $scope.selectApp = function (event, item) {
            var e = event || window.event;
            e.stopPropagation();
            var index = $scope.ciApplication.indexOf(item.appName);
            if (index > -1) {
                $scope.ciApplication.splice(index, 1);
            } else {
                $scope.ciApplication.push(item.appName);
            }
            item.selectFlag = !item.selectFlag;
            $scope.switchTimeLine();
        }


        //无分层应用时光轴
        $scope.getSequential = function () {
            $scope.sequentialBusy = true;
            var params = {
                view_search: {
                    severity: $scope.parmSerity,
                    ciApplication: $scope.ciApplication,
                }
            };
            MonitoringService.appOverviewTimeAxisNoLevel(params).success(function (result) {
                $scope.sequentialData = result.data || [];
                $scope.sequentialBusy = false;
                if (Array.isArray($scope.sequentialData) && $scope.sequentialData.length) {
                    var h = $scope.sequentialData.length * 50;
                    $('.time-line-box').height(h + 155);
                    $timeout(function () {
                        createSequential($scope.sequentialData);
                    });
                }
            });
        };
        //无分层模式时光轴
        function createSequential(data) {
            var dd = data;
            //找到最早的一条告警
            var timelist = [];
            var nowTime;
            dd.forEach(function (val, index) {
                val.dataList.forEach(function (v, i) {
                    timelist.push(Unit.datetimeToUnix(v.FIRSTOCCURRENCE) * 1000);
                    nowTime = v.currentTime;
                });
            })

            var firstTime = new Date(d3.min(timelist));
            var currentTime = new Date(nowTime);

            //绘制坐标轴
            var margin = {
                top: 0,
                right: 0,
                bottom: 0,
                left: 30
            },
                width = $('.time-lines-no').width() - margin.left - margin.right - 200,
                height = $('.svg-wrap').height() - margin.top - margin.bottom;

            //时间比例尺
            var x = d3.scaleTime()
                .domain([firstTime, currentTime])
                .rangeRound([0, width]);

            //时间格式化
            var locale = d3.timeFormatLocale({
                dateTime: "%a %b %e %X %Y",
                date: "%Y/%-m/%-d",
                time: "%H:%M:%S",
                periods: ["AM", "PM"],
                days: [L.get('COMMON_SUN'), L.get('COMMON_MON'), L.get('COMMON_TUES'), L.get('COMMON_WED'), L.get('COMMON_THUR'), L.get('EMV_FRIDAY'), L.get('COMMON_SAT')],
                shortDays: [L.get('COMMON_SUN'), L.get('COMMON_MON'), L.get('COMMON_TUES'), L.get('COMMON_WED'), L.get('COMMON_THUR'), L.get('EMV_FRIDAY'), L.get('COMMON_SAT')],
                months: ["1", "2", "3", "4", "5", "6", "7", "8", "9", "10", "11", "12"],
                shortMonths: ["1", "2", "3", "4", "5", "6", "7", "8", "9", "10", "11", "12"]
            });

            var formatMillisecond = locale.format(".%L"),
                formatSecond = locale.format(":%S"),
                formatMinute = locale.format("%H:%M"),
                formatHour = locale.format("%H:%M"),
                formatDay = locale.format("%m/%d"),
                formatWeek = locale.format("%m/%d"),
                formatMonth = locale.format("%m/%d"),
                formatYear = locale.format("%Y");

            function multiFormat(date) {
                return (d3.timeSecond(date) < date ? formatMillisecond : d3.timeMinute(date) < date ? formatSecond : d3.timeHour(date) < date ? formatMinute : d3.timeDay(date) < date ? formatHour : d3.timeMonth(date) < date ? (d3.timeWeek(date) < date ? formatDay : formatWeek) : d3.timeYear(date) < date ? formatMonth : formatYear)(date);
            }

            //时间坐标轴
            var axisX = d3.axisBottom(x)
                .tickSize(-(height - 65))
                .tickPadding(30)
                .tickFormat(multiFormat);

            $('.svg-wrap').html('');

            var svg = d3.select('.svg-wrap').append('svg')
                .attr('width', width + margin.left + margin.right)
                .attr('height', height + margin.top + margin.bottom)
                .append('g')
                .attr('transform', 'translate(' + margin.left + ',' + margin.top + ')');

            //定义裁剪路径
            svg.append('defs')
                .append('clipPath')
                .attr('id', 'clipPath')
                .append('rect')
                .attr('width', width + 30)
                .attr('height', height - 65)
                .attr('transform', 'translate(-' + margin.left + ',' + margin.top + ')');

            svg.append('g')
                .attr('class', 'axis axis-x')
                .attr('transform', 'translate(0,' + (height - 65) + ')')
                .call(axisX);

            //绘制刻度
            function drawScale() {
                var ticks = svg.select('g.axis-x').selectAll('g.tick');

                ticks.each(function () {
                    var g = d3.select(this);
                    var x1 = g.select('line').attr('x1');
                    var x2 = g.select('line').attr('x2');
                    var y2 = g.select('line').attr('y2');
                    g.select('line.time-scale').remove();
                    g.append('line')
                        .attr('y2', 10)
                        .attr('x1', x1)
                        .attr('x2', x2)
                        .attr('class', 'time-scale');
                });
            }

            drawScale();

            var scrollWrap = svg.append('g')
                .attr('class', 'sequential-scroll-box')
                .attr('clip-path', 'url(#clipPath)');
            var wrap = svg.select('g.sequential-scroll-box').selectAll('g.data-wrap')
                .data(dd);
            wrap.exit().remove();
            wrap.enter()
                .append('g')
                .attr('class', 'data-wrap')
                .merge(wrap)
                .each(function (d, index) {
                    var g = d3.select(this);
                    var group = g.selectAll('g.data-group')
                        .data(d.dataList);
                    group.exit().remove();

                    var groupAll = group.enter()
                        .append('g')
                        .attr('class', 'data-group')
                        .merge(group);

                    groupAll.each(function (d, i) {
                        var g = d3.select(this);
                        var showShape = $scope.levelObj[d.level] || $scope.levelObj['无分层'];//L.get('')
                        //console.log(showShape);
                        g.append('foreignObject')
                            .attr('cursor', 'pointer')
                            .attr('class', 'alarm-circle1 alarm-event')
                            .attr('width', '30px').attr('height', '30px')
                            .attr('x', function (d) {
                                return x(new Date(d.FIRSTOCCURRENCE));
                            })
                            .attr('y', function (d) {
                                return 50 * (index + 1) - 25 - 10;
                            })
                            .append('xhtml:i').style("color", d.COLOR)
                            .html("<i class='iconfont'>" + showShape + "</i>")
                            .on('click', function (d) {
                                $scope.getDetailModal(d);
                            });
                        //第一次告警
                        if (Unit.datetimeToUnix(d.FIRSTOCCURRENCE) * 1000 == d3.min(timelist)) {
                            g.append('text')
                                .html(d.FIRSTOCCURRENCE.substring(11))
                                .attr('class', 'first-alarm1')
                                .attr('x', function () {
                                    return x(new Date(d.FIRSTOCCURRENCE)) - 5;
                                })
                                .attr('y', function () {
                                    return 50 * (index + 1) - 27 - 10;
                                })
                                .style('font-weight', 'bold')
                                .style('font-size', '14px');
                        }
                        //结束时间
                        g.append('foreignObject')
                            .attr('cursor', 'pointer')
                            .attr('class', function () {
                                if (i < groupAll.size() - 1) {
                                    return 'close-circle1 closed';
                                } else {
                                    return 'close-circle1 current';
                                }
                            })
                            .attr('width', '30px').attr('height', '30px')
                            .attr('x', function (d) {
                                if (i < groupAll.size() - 1) {
                                    return x(new Date(d.LASTOCCURRENCE));
                                } else {
                                    return x(currentTime);
                                }
                            })
                            .attr('y', function (d) {
                                return 50 * (index + 1) - 25 - 10;
                            })
                            .append('xhtml:i').style("color", d.COLOR)
                            .html("<i class='iconfont'>" + showShape + "</i>")
                            .on('click', function (d) {
                                $scope.getDetailModal(d);
                            });



                        //连线
                        g.append('path')
                            .attr('class', 'data-path1')
                            .attr('fill', 'none')
                            .attr('stroke', function (d) {
                                return '#F55950';
                            })
                            .attr('stroke-width', '2')
                            .transition()
                            .attrTween('d', function (d) {
                                return function () {
                                    var p = g.selectAll('foreignObject').nodes().map(function (d) {
                                        var ds = d3.select(d);
                                        var cx = isNaN(Number(ds.attr('x'))) ? 0 : Number(ds.attr('x'));
                                        var cy = isNaN(Number(ds.attr('y'))) ? 0 : Number(ds.attr('y'));
                                        // ds.select('i').on('click', function (d) {
                                        //     $scope.getDetailModal(d);
                                        // });
                                        return [cx, cy + 10];
                                    });
                                    return d3.line()(p);
                                }
                            });

                        // 改变层级
                        var path = g.select('.data-path1').nodes()[0];
                        var circle = g.select('.alarm-circle1').nodes()[0];
                        g.nodes()[0].insertBefore(path, circle);
                    });
                });

            //定义缩放
            var zoom = d3.zoom()
                .scaleExtent([1, Number.POSITIVE_INFINITY])
                .translateExtent([
                    [0, 0],
                    [width, height]
                ])
                .extent([
                    [0, 0],
                    [width, height]
                ])
                .on("zoom", zoomed);

            //缩放回调函数
            function zoomed() {
                var t = d3.event.transform,
                    xt = t.rescaleX(x);

                d3.selectAll('.alarm-circle1').each(function () {
                    d3.select(this).attr('x', function (d) {
                        return xt(new Date(d.FIRSTOCCURRENCE));
                    });
                });

                d3.selectAll('.first-alarm1').each(function () {
                    d3.select(this).attr('x', function (d) {
                        return xt(new Date(d.FIRSTOCCURRENCE)) - 5;
                    });
                });

                d3.selectAll('.close-circle1').each(function () {
                    var index = $(d3.select(this).nodes()[0].parentNode).index();
                    var groupSize = $(d3.select(this).nodes()[0].parentNode.parentNode).children().length;

                    d3.select(this).attr('x', function (d) {
                        if (index < groupSize - 1 || $scope.isHistory) {
                            return xt(new Date(d.LASTOCCURRENCE));
                        } else {
                            return xt(currentTime);
                        }
                    });
                });

                d3.selectAll('.data-path1').each(function () {
                    var path = d3.select(this);
                    var pathPar = path.nodes()[0].parentNode;
                    path.transition()
                        .attrTween('d', function (d) {
                            return function () {
                                var p = d3.select(pathPar).selectAll('foreignObject').nodes().map(function (d) {
                                    var ds = d3.select(d);
                                    var cx = isNaN(Number(ds.attr('x'))) ? 0 : Number(ds.attr('x'));
                                    var cy = isNaN(Number(ds.attr('y'))) ? 0 : Number(ds.attr('y'));
                                    return [cx, cy + 10];
                                });
                                return d3.line()(p);
                            }
                        });
                });

                d3.select('.axis-x').call(axisX.scale(xt));

                drawScale();

            }

            d3.select('svg').call(zoom).transition()
                .duration(1500)
                .call(zoom.transform, d3.zoomIdentity
                    .scale(width / (x(currentTime) - x(firstTime)))
                    .translate(-x(firstTime), 0));
        }
        $scope.getDetailModal = function (d) {

            var params = {
                serial: d.SERIAL,
                status: d.STATUS
            };
            uDialog.dialog({
                class: 'detailMore',
                animation: true,
                backdrop: 'static',
                templateUrl: 'app/modal/manageAlert/detailMore.html',
                controller: 'detailMoreCtrl',
                resolve: {
                    flag: function () {
                        return 1
                    },
                    data: function () {
                        return d
                    },
                    params: function () {
                        return params
                    },
                    pageFlag: function () {
                        return 3
                        /*全部事件为1；自定义事件为2*/
                    },
                    eventType: function () {
                        return $scope.eventType
                        /*活动或关闭类型*/
                    },
                    viewId: function () {
                        return $scope.viewId
                    },
                    isOsreen: function () {
                        return 0
                    },

                    css: function () {
                        return true
                    },
                    fn: function () {
                        return function (d) {
                            //alert('1')


                        }
                    }

                }
            });
        }



    }]);



})(nameSpace.reg('graph'));

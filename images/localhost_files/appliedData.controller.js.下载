(function (graph, self) {

    'use strict';

    graph.app.controller('appliedDataCtrl', ['$scope', '$rootScope', '$state', 'Unit', '$filter', 'MonitoringService', '$timeout', '$interval', '$uibModal', 'uDialog', 'DefinedEventsService', '$cookies', '$sce',
        function ($scope, $rootScope, $state, Unit, $filter, MonitoringService, $timeout, $interval, $uibModal, uDialog, DefinedEventsService, $cookies, $sce) {
            var scrollWrap = $('.list-wrap').eq(0);
            var pmvurl = '';
            $scope.params = $state.params.item;
            $scope.token = $cookies.get('token');
            $scope.showEmpty = true;
            $scope.weibosearch = '';

            if (!$scope.params.appName) {
                $scope.params.appName = $cookies.get('appName');
                //$scope.params.currentCount = $cookies.get('currentCount');
            } else {
                $cookies.put('appName', $scope.params.appName)
                //$cookies.put('currentCount', $scope.params.currentCount)
            }

            $timeout(function () {
                MonitoringService.selectPMVUrl({}).success(function (data) {
                    if (data.success) {
                        pmvurl = data.data;
                        $scope.pmvFlag = data.data;
                        // console.log(pmvurl)
                        $scope.pmvurl = $sce.trustAsResourceUrl(pmvurl + '/pmv/dashboard/show.html?#ciCode=' + encodeURIComponent($scope.params.appName) + '&showTimeControl&showRoute&color=#4aa8ff');
                    } else {
                      Unit.error(L.get('EMV_INTERFACE_DATA_REQUEST_IS_NOT_AVAILABLE'))

                    }

                }).error(function () {
                  Unit.error(L.get('EMV_INTERFACE_DATA_REQUEST_IS_NOT_AVAILABLE'))
                });
            });
            $scope.weibosearchKey = function () {
                MonitoringService.eventAppList({ appName: $scope.params.appName, status: 1, searchKey: $scope.weibosearch }).success(function (result) {
                    if (result.success) {
                        $scope.eventList = result.data;
                        try {
                            var colorObj = localStorage.getItem('colorkey');
                            colorObj = JSON.parse(colorObj);
                            if (typeof (colorObj) === 'object') {
                                $scope.colorArr = colorObj.data;
                                $scope.colorArr.forEach(function (item) {
                                    $scope.eventList.forEach(function (listitem) {
                                        if (item.severity === listitem.severity) {
                                            listitem.color = item.color;
                                        }
                                    });
                                });
                            }

                        } catch (err) {
                            console.log(err);
                        }

                    } else {
                        Unit.error(L.get('EMV_THE_ALARM_LIST_FAILED_TO_BE_OBTAINED'));
                    }


                }).error(function () {
                    Unit.error(L.get('EMV_THE_ALARM_LIST_FAILED_TO_BE_OBTAINED'));
                });
            };
            $scope.weibosearchKey();

            MonitoringService.sequenceDiagramApp({ application: $scope.params.appName, status: 1 }).success(function (result) {
                if (result.success) {
                    $scope.timeSequence = result.data.alertList;
                    var h = $scope.timeSequence.length * 40;
                    $('.time-lines-no').height(h + 155);
                    $scope.addSeverityColor($scope.timeSequence);
                    $timeout(function () {
                        createSequential($scope.timeSequence);
                    });
                } else {
                    Unit.error(L.get('EMV_ALARM_TIMING_DIAGRAM'));
                }


            }).error(function () {
                Unit.error(L.get('EMV_ALARM_TIMING_DIAGRAM'));
            });
            $timeout(function () {
                $scope.$broadcast('closebtnstatus', 1)
            });
            var jumpAppliactionFun = function (ciCode) {
                var param = encodeURIComponent(JSON.stringify({
                    type: 'unitFrame',
                    name: $scope.params.appName + L.get('EMV_APPLICATION_ARCHITECTURE_DIAGRAM'),
                    ciCodes: [ciCode]
                }))

                var code = '0417';
                $scope.myURL = '/monitor-web/dmv/integration/page/jumpout/' + code + '?token=' + $cookies.get('token') + '&param=option=' + param;
            }

            MonitoringService.getCiCodeValueByAttr({ attrVal: $scope.params.appName }).success(function (result) {
                if (result.success) {
                    if (result.data) {
                        jumpAppliactionFun(result.data)
                    } else {
                        jumpAppliactionFun($scope.params.appName)
                    }
                } else {
                    jumpAppliactionFun($scope.params.appName)
                }


            }).error(function () {
                jumpAppliactionFun($scope.params.appName)

            });

            //console.log($scope.myURL)
            $scope.$on('showEmpty', function (event, data) {
                $scope.showEmpty = data;
                MonitoringService.getCiCodeValueByAttr({ attrVal: $scope.params.appName }).success(function (result) {
                    if (result.success) {
                        if (result.data) {
                            jumpAppliactionFun(result.data)
                        } else {
                            jumpAppliactionFun($scope.params.appName)
                        }
                    } else {
                        jumpAppliactionFun($scope.params.appName)
                    }


                }).error(function () {
                    jumpAppliactionFun($scope.params.appName)

                });
            })
            //告警详情
            $scope.getAlertInfo = function (item, $event, index) {
                $event.stopPropagation();
                $scope.showSmallDetail = false;
                $scope.showAlertDetail = true;
                $scope.showFaultDetail = false;
                $scope.showEmpty = false;
                $scope.$broadcast('item', item);
                $scope.$broadcast('showAlertDetail', $scope.showAlertDetail);
            };

            //阻止冒泡
            $scope.stopPropagation = function ($event) {
                $event.stopPropagation();
            };

            $scope.addSeverityColor = function (data) {
                $scope.colorObj = JSON.parse(localStorage.getItem('colorkey'));
                $scope.colorObjData = $scope.colorObj.data ? $scope.colorObj.data : [];
                if (!$scope.colorObj) {
                    return;
                }
                if (!data || !data.length || !$scope.colorObjData.length) {
                    return;
                }
                $.each(data, function () {
                    var curSeverity = this.severity;
                    for (var j = 0; j < $scope.colorObjData.length; j++) {
                        if (curSeverity === $scope.colorObjData[j].severity) {
                            this.severityColor = $scope.colorObjData[j].color;
                            this.newChineseName = $scope.colorObjData[j].chineseName
                        }
                    }
                })
                return data;
            }
            //创建时序图
            function createSequential(sequentialData) {
                var dd = sequentialData;
                console.log(dd);
                //找到最早的一条告警
                var timelist = [];
                $.each(dd, function () {
                    this.alertHistory = this.alertHistory || [];
                    //重新组装数据
                    this.alertHistory.push({
                        firstOccurrence: this.firstoccurrence,
                        lastOccurrence: this.lastoccurrence,
                        severity: this.severity,
                        summary: this.summary,
                        serial: this.serial,
                        obj: this,

                    });

                    $.each(this.alertHistory, function () {
                        timelist.push(Unit.datetimeToUnix(this.firstOccurrence) * 1000);
                    });
                });
                var firstTime = new Date(d3.min(timelist));
                var currentTime = new Date(dd[0].currentTime);

                //绘制坐标轴
                var margin = {
                    top: 0,
                    right: 0,
                    bottom: 0,
                    left: 30
                },
                    width = $('.time-lines-no').width() - margin.left - margin.right - 180,
                    height = $('.svg-wrap').height() - margin.top - margin.bottom;

                //时间比例尺
                var x = d3.scaleTime()
                    .domain([firstTime, currentTime])
                    .rangeRound([0, width]);

                //时间格式化
                var locale = d3.timeFormatLocale({
                    dateTime: '%a %b %e %X %Y',
                    date: '%Y/%-m/%-d',
                    time: '%H:%M:%S',
                    periods: ['AM', 'PM'],
                    days: [L.get('COMMON_SUN'), L.get('COMMON_MON'), L.get('COMMON_TUES'),  L.get('COMMON_WED'), L.get('COMMON_THUR'),  L.get('EMV_FRIDAY'),  L.get('COMMON_SAT')],
                    shortDays: [L.get('COMMON_SUN'), L.get('COMMON_MON'), L.get('COMMON_TUES'),  L.get('COMMON_WED'), L.get('COMMON_THUR'),  L.get('EMV_FRIDAY'),  L.get('COMMON_SAT')],
                    months: ['1', '2', '3', '4', '5', '6', '7', '8', '9', '10', '11', '12'],
                    shortMonths: ['1', '2', '3', '4', '5', '6', '7', '8', '9', '10', '11', '12']
                });

                var formatMillisecond = locale.format('.%L'),
                    formatSecond = locale.format(':%S'),
                    formatMinute = locale.format('%H:%M'),
                    formatHour = locale.format('%H:%M'),
                    formatDay = locale.format('%m/%d'),
                    formatWeek = locale.format('%m/%d'),
                    formatMonth = locale.format('%m/%d'),
                    formatYear = locale.format('%Y');

                function multiFormat(date) {
                    return (d3.timeSecond(date) < date ? formatMillisecond : d3.timeMinute(date) < date ? formatSecond : d3.timeHour(date) < date ? formatMinute : d3.timeDay(date) < date ? formatHour : d3.timeMonth(date) < date ? (d3.timeWeek(date) < date ? formatDay : formatWeek) : d3.timeYear(date) < date ? formatMonth : formatYear)(date);
                }

                //时间坐标轴
                var axisX = d3.axisBottom(x)
                    .tickSize(-(height - 65))
                    .tickPadding(30)
                    .tickFormat(multiFormat);

                $('.svg-wrap').html('');

                var svg = d3.select('.svg-wrap').append('svg')
                    .attr('width', width + margin.left + margin.right)
                    .attr('height', height + margin.top + margin.bottom)
                    .append('g')
                    .attr('transform', 'translate(' + margin.left + ',' + margin.top + ')');

                //定义裁剪路径
                svg.append('defs')
                    .append('clipPath')
                    .attr('id', 'clipPath')
                    .append('rect')
                    .attr('width', width + 30)
                    .attr('height', height - 65)
                    .attr('transform', 'translate(-' + margin.left + ',' + margin.top + ')');

                svg.append('g')
                    .attr('class', 'axis axis-x')
                    .attr('transform', 'translate(0,' + (height - 65) + ')')
                    .call(axisX);

                //绘制刻度
                function drawScale() {
                    var ticks = svg.select('g.axis-x').selectAll('g.tick');

                    ticks.each(function () {
                        var g = d3.select(this);
                        var x1 = g.select('line').attr('x1');
                        var x2 = g.select('line').attr('x2');
                        var y2 = g.select('line').attr('y2');
                        g.select('line.time-scale').remove();
                        g.append('line')
                            .attr('y2', 10)
                            .attr('x1', x1)
                            .attr('x2', x2)
                            .attr('class', 'time-scale');
                    });
                }

                drawScale();

                var scrollWrap = svg.append('g')
                    .attr('class', 'sequential-scroll-box')
                    .attr('clip-path', 'url(#clipPath)');

                var wrap = svg.select('g.sequential-scroll-box').selectAll('g.data-wrap')
                    .data(dd);
                wrap.exit().remove();

                wrap.enter()
                    .append('g')
                    .attr('class', 'data-wrap')
                    .merge(wrap)
                    .each(function (d, index) {
                        var g = d3.select(this);
                        var group = g.selectAll('g.data-group')
                            .data(d.alertHistory);
                        group.exit().remove();

                        var groupAll = group.enter()
                            .append('g')
                            .attr('class', 'data-group')
                            .merge(group);

                        groupAll.each(function (d, i) {
                            var g = d3.select(this);
                            //开始时间
                            g.append('circle')
                                .attr('class', 'alarm-circle')
                                .attr('cursor', 'pointer')
                                .attr('r', 5)
                                .attr('cx', function (d) {
                                    return x(new Date(d.firstOccurrence));
                                })
                                .attr('cy', function (d) {
                                    return 40 * (index + 1) - 20;
                                })
                                .attr('fill', function (d) {
                                    return getColor(d.severity);
                                })
                                .attr('stroke', 'transparent')
                                .attr('stroke-width', 2)
                                .attr('rank', function (d) {
                                    return d.severity;
                                })
                                .on('click', function (d) {
                                    console.log(d);
                                    d.obj.eventType = 1;
                                    $scope.getDetailModal(d.obj);
                                });


                            //第一次告警
                            // if (Unit.datetimeToUnix(d.firstOccurrence) * 1000 == d3.min(timelist)) {
                            //     g.append('text')
                            //         .html(d.firstOccurrence.substring(11))
                            //         .attr('class', 'first-alarm')
                            //         .attr('x', function () {
                            //             return x(new Date(d.firstOccurrence)) - 5;
                            //         })
                            //         .attr('y', function () {
                            //             return 40 * (index + 1) - 27;
                            //         })
                            //         .style('font-weight', 'bold')
                            //         .style('font-size', '14px');
                            // }

                            //结束时间
                            g.append('circle')
                                .attr('cursor', 'pointer')
                                .attr('class', function () {
                                    if (i < groupAll.size() - 1 || $scope.isHistory) {
                                        return 'close-circle closed';
                                    } else {
                                        return 'close-circle current';
                                    }
                                })
                                .attr('r', 5)
                                .attr('cx', function (d) {
                                    if (i < groupAll.size() - 1 || $scope.isHistory) {
                                        return x(new Date(d.lastOccurrence));
                                    } else {
                                        return x(currentTime);
                                    }
                                })
                                .attr('cy', function (d) {
                                    return 40 * (index + 1) - 20;
                                })
                                .attr('fill', function (d) {
                                    if (i < groupAll.size() - 1 || $scope.isHistory) {
                                        return '#81d925';
                                    } else {
                                        return 'transparent';
                                    }
                                })
                                .attr('stroke', 'transparent')
                                .attr('stroke-width', 2)


                            //连线
                            g.append('path')
                                .attr('class', 'data-path')
                                .attr('fill', 'none')
                                .attr('stroke', function (d) {
                                    return getColor(d.severity);
                                })
                                .attr('stroke-width', '2')
                                .transition()
                                .attrTween('d', function (d) {
                                    return function () {
                                        var p = g.selectAll('circle').nodes().map(function (d) {
                                            var ds = d3.select(d);
                                            var cx = isNaN(Number(ds.attr('cx'))) ? 0 : Number(ds.attr('cx'));
                                            return [cx, +ds.attr('cy')]
                                        });
                                        return d3.line()(p);
                                    }
                                });

                            // 改变层级
                            var path = g.select('.data-path').nodes()[0];
                            var circle = g.select('.alarm-circle').nodes()[0];
                            g.nodes()[0].insertBefore(path, circle);
                        });
                    });

                //定义缩放
                var zoom = d3.zoom()
                    .scaleExtent([1, Number.POSITIVE_INFINITY])
                    .translateExtent([
                        [0, 0],
                        [width, height]
                    ])
                    .extent([
                        [0, 0],
                        [width, height]
                    ])
                    .on('zoom', zoomed);

                //缩放回调函数
                function zoomed() {
                    var t = d3.event.transform,
                        xt = t.rescaleX(x);

                    d3.selectAll('.alarm-circle').each(function () {
                        d3.select(this).attr('cx', function (d) {
                            return xt(new Date(d.firstOccurrence));
                        });
                    });

                    d3.selectAll('.first-alarm').each(function () {
                        d3.select(this).attr('cx', function (d) {
                            return xt(new Date(d.firstOccurrence)) - 5;
                        });
                    });

                    d3.selectAll('.close-circle').each(function () {
                        var index = $(d3.select(this).nodes()[0].parentNode).index();
                        var groupSize = $(d3.select(this).nodes()[0].parentNode.parentNode).children().length;

                        d3.select(this).attr('cx', function (d) {
                            if (index < groupSize - 1 || $scope.isHistory) {
                                return xt(new Date(d.lastOccurrence));
                            } else {
                                return xt(currentTime);
                            }
                        });
                    });


                    d3.selectAll('.data-path').each(function () {
                        var path = d3.select(this);
                        var pathPar = path.nodes()[0].parentNode;
                        path.transition()
                            .attrTween('d', function (d) {
                                return function () {
                                    var p = d3.select(pathPar).selectAll('circle').nodes().map(function (d) {
                                        var ds = d3.select(d);
                                        var cx = isNaN(Number(ds.attr('cx'))) ? 0 : Number(ds.attr('cx'));
                                        return [cx, +ds.attr('cy')]
                                    });
                                    return d3.line()(p);
                                }
                            });
                    });

                    d3.select('.axis-x').call(axisX.scale(xt));

                    drawScale();

                }

                d3.select('svg').call(zoom).transition()
                    .duration(1500)
                    .call(zoom.transform, d3.zoomIdentity
                        .scale(width / (x(currentTime) - x(firstTime)))
                        .translate(-x(firstTime), 0));

                //SVG滚动
                $('.alert-sequential-wrap .alert-list').on('scroll', function (e) {
                    $('.sequential-scroll-box').attr('transform', 'translate(0, -' + e.target.scrollTop + ')');
                    $('#clipPath rect').attr('transform', 'translate(-' + margin.left + ', ' + e.target.scrollTop + ')');
                });
                $scope.colorObj = JSON.parse(localStorage.getItem('colorkey'));
                $scope.colorObjData = $scope.colorObj.data ? $scope.colorObj.data : [];
                //获取各类型告警个数
                $scope.alarmRank1Num = {};
                for (var p = 0; p < $scope.colorObjData.length; p++) {
                    var severityNum = $scope.colorObjData[p].severity;
                    $scope.alarmRank1Num['rank' + severityNum] = $('.svg-wrap').find('circle[rank=' + severityNum + ']').length;
                }
                $.each($scope.colorObjData, function () {
                    var severityNum = this.severity;
                    $scope.alarmRank1Num['rank' + severityNum] = $('.svg-wrap').find('circle[rank=' + severityNum + ']').length;
                });
            }
            $scope.getDetailModal = function (d) {
                var params = {
                    serial: d.serial,
                    status: d.status
                };
                
                uDialog.dialog({
                    class: 'detailMore',
                    animation: true,
                    backdrop: 'static',
                    templateUrl: 'app/modal/manageAlert/detailMore.html',
                    controller: 'detailMoreCtrl',
                    resolve: {
                        flag: function () {
                            return 1
                        },
                        data: function () {
                            return d
                        },
                        params: function () {
                            return params
                        },
                        pageFlag: function () {
                            return 3
                            /*全部事件为1；自定义事件为2*/
                        },
                        eventType: function () {
                            return $scope.eventType
                            /*活动或关闭类型*/
                        },
                        viewId: function () {
                            return $scope.viewId
                        },
                        isOsreen: function () {
                            return 0
                        },

                        css: function () {
                            return true
                        },
                        fn: function () {
                            return function (d) {
                                //alert('1')


                            }
                        }

                    }
                });
            }

            function getColor(severity) {
                var color;
                $scope.colorObj = JSON.parse(localStorage.getItem('colorkey'));
                $scope.colorObjData = $scope.colorObj.data ? $scope.colorObj.data : [];
                for (var g = 0; g < $scope.colorObjData.length; g++) {
                    if (severity === $scope.colorObjData[g].severity) {
                        color = $scope.colorObjData[g].color;
                    }
                }

                return color;
            }
            //回到顶部
            $scope.goTop = function () {
                $(scrollWrap).animate({
                    scrollTop: 0
                }, 300);
            };
            //拖动改变左右比例
            var parentW;
            $timeout(function () {
                parentW = $('.events-list-wrap').width() / 0.4;
            }, 1);
            $('.drag-scale').bind('mousedown', function (e) {
                var dragW = $('.drag-scale').width() + 1;
                var leftW = $('.events-list-wrap').width();
                var disX = e.pageX;
                $(document).bind('mousemove', function (e) {
                    var _disX = e.pageX;
                    var _leftW = leftW + (_disX - disX);
                    var marginLeft = leftW + (_disX - disX) + dragW;

                    if (_leftW < 400) {
                        _leftW = 400;
                        marginLeft = 400 + dragW;
                    }

                    if (_leftW > (parentW - 350 - dragW)) {
                        _leftW = parentW - 350 - dragW;
                        marginLeft = _leftW + dragW;
                    }

                    $('.events-list-wrap').width(_leftW);
                    $('.fault-detail-wrap').css('margin-left', marginLeft);
                });

                $(document).bind('mouseup', function () {
                    $(document).unbind('mousemove');
                    $(document).unbind('mouseup');
                });

                return false;
            });


        }

    ]);



})(nameSpace.reg('graph'), nameSpace.reg('monitor.current'));


/**
 * Created by Administrator on 2017/6/6.
 */
/**
 * Created by Administrator on 2017/6/6.
 */
(function (graph) {

    'use strict';

    graph.app.controller('filterCtrl', ['$scope', '$state', '$timeout', 'MonitoringService', '$uibModal', 'Unit', 'uDialog', '$stateParams', function ($scope, $state, $timeout, MonitoringService, $uibModal, Unit, uDialog, $stateParams) {
        $scope.typeName = $stateParams.name;
        $scope.stateParamsObj = {};
        $scope.stateParamsObj = $stateParams;
        $scope.ruleDetailFlag = true;
        $scope.objs = {};
        $scope.ruleType = 2;
        $scope.freshFlag = false;
        //页面滚动条回到初始位置
        $scope.topFun = function () {
            $('.content').animate({
                scrollTop: 0
            }, 300);
        }
        //设置左侧顺序线的长度
        $scope.lineLong = function () {
            $timeout(function () {
                var height = angular.element('.content-following5').height();
                angular.element('.step-line1').height(height);
                var height2 = angular.element('.content-following1').height();
                angular.element('.step-line2').height(height2);
                var height3 = angular.element('.content-following2').height();
                angular.element('.step-line3').height(height3);
            }, 10);
        };

        //弹出添加页面
        $scope.ruleDetailFun = function (ruleDetail) {

            $scope.rules = [];//筛选规则
            $scope.topFun();
            //$scope.copyFlag = false;

            if (ruleDetail) {
                $scope.sourceId = [];
                $scope.removeButton = true;//修改时显示右上角删除按钮
                $scope.ruleId = ruleDetail.id;
                $scope.objs.newRuleFatherName = ruleDetail.name;

                MonitoringService.getRuleById({
                    'id': ruleDetail.id
                }).success(function (result) {
                    if (result.success) {

                        $scope.result = result.data;
                        $scope.objs.ruleDetail = $scope.result.description;
                        $scope.sourceId = $scope.result.sourceIdList;
                        switch ($scope.result.filterType) {
                            case 1:


                                $('[name="filter"]')[0].checked = true;

                                break;
                            case 3:


                                $('[name="filter"]')[1].checked = true;


                                break;
                        }




                        if ($scope.result.selectorList) {
                            $.each($scope.result.selectorList, function () {
                                $scope.rules.push(this.selectors)

                            });
                        }
                        $scope.ruleDetailFlag = false;
                        $timeout(function () {

                            $scope.lineLong();
                            $scope.$broadcast('sourceId', $scope.sourceId);
                            $scope.$broadcast('rules', $scope.rules);
                            $scope.$broadcast('ruleId', $scope.ruleId);
                            $scope.$broadcast('freshFlag', $scope.freshFlag)
                            $scope.$broadcast('removeButton', $scope.removeButton);
                            $scope.$broadcast('sourceIdArray', $scope.sourceId);
                            //$scope.$broadcast('copyFlag', $scope.copyFlag);

                        },300)

                    } else {
                        Unit.error(L.get('EMV_INTERFACE_DATA_REQUEST_IS_NOT_AVAILABLE'))
                    }


                })
            } else {
                $timeout(function () {
                    $('#newNameInput').focus();
                }, 2)
                $scope.rules = [
                    [
                        {
                            property: 'CINAME',
                            operator: '==',
                            value: '*',
                            propertyDesc: L.get('EMV_EVENT_OBJECT'),
                            operatorDesc: L.get('EMV_EQUAL'),
                        }
                    ]

                ];
                $scope.removeButton = false;
                $scope.objs.newRuleFatherName = '';
                $scope.ruleId = '';
                $scope.objs.ruleDetail = '';
                if ($('[name="filter"]')[0]) {
                    $('[name="filter"]')[0].checked = true;
                } else {
                    $timeout(function () {
                        $('[name="filter"]')[0].checked = true;
                    }, 2)
                }

                $scope.copyValueFun($scope.rules);
                $scope.ruleDetailFlag = false;
                $timeout(function () {

                    $scope.lineLong();
                    $scope.$broadcast('sourceId', []);
                    $scope.$broadcast('rules', $scope.rules);
                    $scope.$broadcast('ruleId', $scope.ruleId);
                    $scope.$broadcast('freshFlag', $scope.freshFlag);
                    $scope.$broadcast('removeButton', $scope.removeButton);
                    $scope.$broadcast('sourceIdArray', []);
                    // $scope.$broadcast('copyFlag', $scope.copyFlag);
                }, 300)
            }



        }
        //规则描述框内容返显
        $scope.copyValueFun = function (rules) {
            $scope.andObj = L.get('EMV_FILER_EVENT_RANGE')+':';
            for (var i = 0; i < rules.length; i++) {
                for (var j = 0; j < rules[i].length; j++) {
                    if (j == rules[i].length - 1) {
                        $scope.andObj += rules[i][j].propertyDesc + rules[i][j].operatorDesc + rules[i][j].value;
                    } else {
                        $scope.andObj += rules[i][j].propertyDesc + rules[i][j].operatorDesc + rules[i][j].value + ' ' + L.get('COMMON_AND') + ' ';
                    }

                }
                if (i < rules.length - 1) {
                    $scope.andObj += ' ' + L.get('COMMON_OR') + ' ';
                }

            }
            $scope.objs.ruleDetail = $scope.andObj;
        }





        $scope.$on('ruleTitleName', function (event, data) {
            $scope.objs.newRuleFatherName = data;
        })
        $scope.$on('rules', function (event, data) {
            $scope.rules = data;//接受值
        });
        $scope.$on('ruleDetail', function (event, data) {
            $scope.objs.ruleDetail = data;//接受值
        });
        $scope.$on('freshFlag', function (event, data) {
            $scope.freshFlag = data;//接受值
        });
        $scope.$on('sourceId', function (event, data) {
            $scope.sourceId = data;
            $scope.$broadcast('sourceIdArray', $scope.sourceId)
        })
        $scope.$on('copyFlag', function (event, data) {
            $scope.copyFlag = data;
        })
        $scope.$on('saveCopyId', function (event, data) {
            $scope.saveId = data;
            $scope.$broadcast('saveId', $scope.saveId);
        })
        //保存调接口函数
        $scope.saveLastFun = function (flag) {
            var selectorList = [];
            $.each($scope.rules, function () {
                var json = {};
                json.selectors = this;
                selectorList.push(json);
            });
            var checkStingLong = JSON.stringify(selectorList);
            if (checkStingLong.length > 4096) {
              Unit.error(L.get('EMV_FILTER_CONDITION_CHARACTER_LENGTH_CANNOT_EXCEED')+'4000')
                return false;
            }
            if ($scope.objs.ruleDetail.length > 512) {
              Unit.error(L.get('EMV_DESCRIPTION_CHARACTER_LENGTH_CANNOT_EXCEED')+'500')
                return false;
            }
            MonitoringService.saveRule({
                'id': $scope.ruleId,
                'name': $scope.objs.newRuleFatherName,
                'ruleType': '2',
                'active': flag,
                'priority': 1,
                'description': $scope.objs.ruleDetail,
                'selectorList': selectorList,
                'filterType': $('input[name="filter"]:checked').val(),
                'sourceIdList': $scope.sourceId


            }).success(function (result) {
                if (result.success) {
                    Unit.success(L.get('COMMON_SAVED_SUCCESSFULLY'));
                    $scope.freshFlag = !$scope.freshFlag;
                    $scope.ruleDetailFlag = true;
                    $scope.$broadcast('saveId', result.data);
                } else {
                  Unit.error(L.get('COMMON_SAVE_FAILED'));
                    $scope.$broadcast('saveId', result.data);
                }

            })

        }

        //保存校验
        $scope.saveFun = function (flag) {
            if ($scope.sourceId == null) {
              Unit.error(L.get('EMV_THE_SOURCE_OF_THE_EVENT_CANNOT_BE_UNSELECTED'))
                return false;
            }
            if ($('input[name="filter"]:checked').length == 0) {
                Unit.error('请设置过滤策略')
                return false;
            }
            if (!$scope.objs.newRuleFatherName) {
                Unit.error(L.get('COMMON_RULE_NAME_CANNOT_BE_EMPTY'))
                return false;
            }
            if ($scope.ruleId) {
                MonitoringService.checkRuleName({
                    'name': $scope.objs.newRuleFatherName,
                    'id': $scope.ruleId,
                    'ruleType': 2
                }).success(function (result) {
                    if (result.success == true) {
                        $scope.saveLastFun(flag);
                    } else {
                      Unit.error(L.get('EMV_RULE_NAME_ALREADY_EXISTS'))
                    }
                })
            } else {
                MonitoringService.checkRuleName({
                    'name': $scope.objs.newRuleFatherName,
                    'ruleType': 2
                }).success(function (result) {
                    if (result.success == true) {
                        $scope.saveLastFun(flag);
                    } else {
                      Unit.error(L.get('EMV_RULE_NAME_ALREADY_EXISTS'))
                    }
                })
            }



        }
        //取消按钮
        $scope.cancelFun = function () {
            $scope.ruleDetailFlag = true;
        }


        // 自定义下拉框
        $('.environment-edit-wrap').on('click', '.select-wrap', function (event) {
            event.stopPropagation();
            // $(this).toggleClass('active');
            $(this).find('.drop-menu').stop().slideToggle(150);

        });
        $('.environment-edit-wrap').on('click', '.select-wrap1', function (event) {
            event.stopPropagation();
            // $(this).toggleClass('active');
            $(this).find('.drop-menu1').stop().slideToggle(150);

        });
        $('.environment-edit-wrap').on('click', '.drop-menu li', function () {
            var ele = $(this).parent().siblings('.select-choice');
            ele.html($(this).html());
        });
        $(document).on('click', function () {
            $('.select-wrap').find('.drop-menu').stop().slideUp(150);
            $('.select-wrap1').find('.drop-menu1').stop().slideUp(150);
            $scope.$broadcast('importFlag', false)

        });

        $(document).on('click', function () {
            // $('.select-wrap1').removeClass('active');
            $scope.objs.listShowFlag = false;
            if (!$scope.$$phase) {
                $scope.$apply();
            }
            $scope.lineLong()
            //console.log($scope.mailContentFlag)
        });
        // 拖拽缩放功能
        var parentW;
        $timeout(function () {
            parentW = $('.preview-wrapper').width() / 0.4;
        }, 1);

        $('.drag-scale').bind('mousedown', function (e) {
            var dragW = $('.drag-scale').width() + 2;
            var leftW = $('.preview-wrapper').width();
            var disX = e.pageX;

            $(document).bind('mousemove', function (e) {
                var _disX = e.pageX;
                var _leftW = leftW + (_disX - disX);
                var marginLeft = leftW + (_disX - disX) + dragW;

                if (_leftW < 400) {
                    _leftW = 400;
                    marginLeft = 400 + dragW;
                }

                if (_leftW > (parentW - 500 - dragW)) {
                    _leftW = parentW - 500 - dragW;
                    marginLeft = _leftW + dragW;
                }

                $('.preview-wrapper').width(_leftW);
                $('.environment-edit-wrap').css('margin-left', marginLeft);
            });

            $(document).bind('mouseup', function () {
                $(document).unbind('mousemove');
                $(document).unbind('mouseup');
            });

            return false;
        });

    }]);
	/*
	 * 高亮搜索关键词
	 * @param: 文本内容
	 * @param： 搜索关键词
	 * html标签中使用指令 ng-bind-html
	 */
    graph.app.filter('highlightWord', ['$sce', function ($sce) {
        return function (text, keyword) {
            if (!keyword) {
                return $sce.trustAsHtml(text);
            }
            text = encodeURI(text);
            keyword = encodeURI(keyword);

            var reg = new RegExp(keyword, 'gi')
            var result = text.replace(reg, '<span class="highlightedText">$&</span>');
            result = decodeURI(result);
            return $sce.trustAsHtml(result);
        }
    }]);

})(nameSpace.reg('graph'));

/**
 * Created by Administrator on 2017/6/6.
 */
/**
 * Created by Administrator on 2017/6/6.
 */
(function (graph) {

    'use strict';

    graph.app.controller('enrichCtrl', ['$scope', '$state', '$timeout', 'MonitoringService', '$uibModal', 'Unit', 'uDialog', '$stateParams', function ($scope, $state, $timeout, MonitoringService, $uibModal, Unit, uDialog, $stateParams) {
        $scope.stateParamsObj = {};
        $scope.stateParamsObj = $stateParams;
        //console.log($scope.stateParamsObj)
        $scope.typeName = $stateParams.name;//点击左侧菜单列表，获得左侧列表title
        $scope.ruleDetailFlag = true;
        $scope.objs = {};
        $scope.ruleType = 12;
        $scope.freshFlag = false;
        //页面滚动条回到初始位置
        $scope.topFun = function () {
            $('.content').animate({
                scrollTop: 0
            }, 300);
        }
        //设置左侧顺序线的长度
        $scope.lineLong = function () {
            $timeout(function () {
                var height = angular.element('.content-following5').height();
                angular.element('.step-line1').height(height);
                var height2 = angular.element('.content-following1').height();
                angular.element('.step-line2').height(height2);
                var height3 = angular.element('.content-following2').height();
                angular.element('.step-line3').height(height3);
            }, 10);
        };


        //全选按钮事件
        $scope.checkAllFun = function () {
            var checked = []
            $scope.allCheked = !$scope.allCheked
            if (!$scope.allCheked) {
                $.each($scope.source, function (index, item) {
                    item.Cheked = false;
                })
                $scope.sourceId = [];
            } else {
                $.each($scope.source, function (index, item) {
                    item.Cheked = true;
                })
                $scope.sourceId = null;
                Unit.error(L.get('EMV_THE_SOURCE_OF_THE_EVENT_CANNOT_BE_UNSELECTED'))
            }
            $scope.$broadcast('sourceIdArray', $scope.sourceId);

        }
        //事件源单选按钮
        $scope.ckekedSourceFun = function (item) {
            item.Cheked = !item.Cheked;
            var cheked = [];
            var flag = false;//判断循环走完的标识
            $.each($scope.source, function (index, item1) {
                if (!item1.Cheked) {
                    cheked.push(item1.code);
                }
                if (index == $scope.source.length - 1) {
                    flag = true;
                }
            })
            if (flag) {
                if (cheked.length == $scope.source.length) {
                    $scope.allCheked = false;
                    $scope.sourceId = [];
                } else if (cheked.length == 0) {
                    $scope.allCheked = true;
                    $scope.sourceId = null;
                    Unit.error(L.get('EMV_THE_SOURCE_OF_THE_EVENT_CANNOT_BE_UNSELECTED'))
                } else {
                    $scope.allCheked = true;
                    $scope.sourceId = cheked;
                }
            }
            $scope.$broadcast('sourceIdArray', $scope.sourceId);
        }
        //添加丰富策略
        $scope.addEnrichFun = function () {
            var flag = true;
            $.each($scope.enrichStrategyArr, function (index, item) {
                if (!item.defindeShow && !item.ciShow) {
                    flag = false;
                }
                if ((index == $scope.enrichStrategyArr.length - 1) && flag) {
                    $scope.enrichStrategyArr.push({});
                }
            })

        }
        //删除丰富规则
        $scope.deleteEnrichFun = function ($index) {
            $scope.enrichStrategyArr.splice($index, 1)
        }
        //弹出添加页面
        $scope.ruleDetailFun = function (ruleDetail) {
            //$scope.freshFlag=false;
            $scope.rules = [];//筛选规则
            $scope.topFun();//规则详情页面滚动条回到顶部
            $scope.sourceId = [];//给后台传的事件源ID
            $scope.$on('ruleTitleName', function (event, data) {
                $scope.objs.newRuleFatherName = data;
            })
            $scope.ruleDetailFlag = true;
            $scope.objs.userDefined = false;
            $scope.objs.unuserDefined = false;
            $scope.enrichStrategyArr = [{}];
            $scope.source = [];//定义事件源


            //获取事件源字段
            MonitoringService.queryDict({ groupId: 1 }).success(function (result) {
                if (result.success) {
                    $scope.source = result.data;
                    MonitoringService.getSelectorCodes({
                        codeType: 12
                    }).success(function (result) {
                        if (result.success) {
                            $scope.enrichData = result.data;
                            $scope.defaultCIData = result.data;
                            MonitoringService.getCiClassCodes({}).success(function (result) {
                                if (result.success) {
                                    $scope.CiClassCodes = result.data;
                                    if (ruleDetail) {
                                        $scope.ruleId = ruleDetail.id;
                                        $scope.objs.newRuleFatherName = ruleDetail.name;
                                        MonitoringService.getRuleById({
                                            id: ruleDetail.id
                                        }).success(function (result) {
                                            if (result) {
                                                $scope.result = result.data;
                                                $scope.CIvalue = result.data.action.ciMatches;
                                                //默认丰富规则打开
                                                if ($scope.result.default == true) {
                                                    $scope.ruleDetailFlag = false;
                                                    $scope.objs.userDefined = true;
                                                    $scope.removeButton = false;//修改时显示右上角删除按钮
                                                    $.each($scope.defaultCIData, function (index, item) {
                                                        if ($scope.CIvalue) {
                                                            if ($scope.CIvalue.length > 0) {
                                                                $.each($scope.CIvalue, function (index1, item1) {
                                                                    if (item.value == item1.eventAttr) {
                                                                        item.Civalue = item1.ciAttr;
                                                                    }
                                                                })
                                                            }
                                                        }

                                                    })

                                                } else {
                                                    $scope.allCheked = true;
                                                    $.each($scope.source, function (index, item) {
                                                        item.Cheked = true;

                                                    })
                                                    $scope.removeButton = true;//修改时显示右上角删除按钮
                                                    if ($scope.result.selectorList) {
                                                        $.each($scope.result.selectorList, function () {
                                                            $scope.rules.push(this.selectors)

                                                        });
                                                    }
                                                    $scope.enrichStrategyArr = $scope.result.action.ciMatches;
                                                    if ($scope.enrichStrategyArr.length > 0) {
                                                        $.each($scope.enrichStrategyArr, function (index, item) {
                                                            if (item.ciClassId) {
                                                                MonitoringService.getCiAttrDefs({ classId: item.ciClassId }).success(function (result) {
                                                                    item.getCiAttrDefs = result.data;

                                                                }).error(function () {

                                                                });
                                                            }
                                                        })
                                                    }

                                                    $scope.sourceId = $scope.result.sourceIdList;
                                                    if ($scope.sourceId.length == 0) {

                                                        $scope.allCheked = false;

                                                        $.each($scope.source, function (index, item) {
                                                            item.Cheked = false;

                                                        })
                                                    } else if ($scope.sourceId.length > 0) {

                                                        $scope.allCheked = true;
                                                        $.each($scope.source, function (index, item) {
                                                            $.each($scope.sourceId, function (index1, item1) {
                                                                if (item1 == item.code) {
                                                                    item.Cheked = false;
                                                                }
                                                            })
                                                        })
                                                    }
                                                    $timeout(function () {
                                                        $.each($scope.enrichStrategyArr, function (index, item) {
                                                            if (item.matchType == 1) {
                                                                item.ciShow = true;
                                                                item.defindeShow = false;

                                                                $('[name=' + index + ']')[0].checked = true;

                                                            } else if (item.matchType == 2) {
                                                                item.ciShow = false;
                                                                item.defindeShow = true;
                                                                $('[name=' + index + ']')[1].checked = true;
                                                            }

                                                        })
                                                    }, 6)



                                                    $scope.objs.unuserDefined = true;
                                                    $scope.ruleId = ruleDetail.id;
                                                    $scope.objs.ruleDetail = $scope.result.description;
                                                    $timeout(function () {
                                                        $scope.$broadcast('rules', $scope.rules);
                                                        $scope.$broadcast('ruleId', $scope.ruleId);
                                                        $scope.$broadcast('freshFlag', $scope.freshFlag)
                                                        $scope.$broadcast('removeButton', $scope.removeButton);
                                                        $scope.$broadcast('sourceIdArray', $scope.sourceId);
                                                        $scope.lineLong();

                                                    }, 300)
                                                    $scope.ruleDetailFlag = false;


                                                }

                                            }


                                        })


                                    } else {
                                        $scope.allCheked = false;
                                        $.each($scope.source, function (index, item) {
                                            item.Cheked = false;

                                        })

                                        $scope.objs.unuserDefined = true;
                                        $timeout(function () {
                                            $('#newNameInput').focus();
                                        })
                                        //console.log($scope.inputShow)
                                        $scope.rules = [
                                            [
                                                {
                                                    property: 'CINAME',
                                                    operator: '==',
                                                    value: '*',
                                                    propertyDesc: L.get('EMV_EVENT_OBJECT'),
                                                    operatorDesc: L.get('EMV_EQUAL') 
                                                }
                                            ]

                                        ];
                                        $scope.removeButton = false;
                                        $scope.objs.newRuleFatherName = '';
                                        $scope.ruleId = '';
                                        $scope.objs.ruleDetail = '';


                                        $scope.copyValueFun($scope.rules);
                                        $timeout(function () {
                                            $scope.$broadcast('rules', $scope.rules);
                                            $scope.$broadcast('ruleId', $scope.ruleId);
                                            $scope.$broadcast('freshFlag', $scope.freshFlag)
                                            $scope.$broadcast('removeButton', $scope.removeButton);
                                            $scope.$broadcast('sourceIdArray', $scope.sourceId);
                                            $scope.lineLong();
                                        },300)
                                        $scope.ruleDetailFlag = false;
                                    }


                                } else {
                                    Unit.error(L.get('EMV_INTERFACE_DATA_REQUEST_IS_NOT_AVAILABLE'))
                                }


                            })

                        } else {
                            Unit.error(L.get('EMV_INTERFACE_DATA_REQUEST_IS_NOT_AVAILABLE'))
                        }
                    })
                } else {
                    Unit.error(L.get('EMV_INTERFACE_DATA_REQUEST_IS_NOT_AVAILABLE'))
                }


            })


            //$scope.ruleDetailFlag=false;


        }
        $scope.selectFun = function (item, item1) {

            item.eventAttr = item1.value;

        }
        $scope.selectFun1 = function (item, item2) {

            item.ciClassId = item2.id;
            MonitoringService.getCiAttrDefs({ classId: item2.id }).success(function (result) {
                item.getCiAttrDefs = result.data;

            }).error(function () {

            });


        }
        $scope.selectFun2 = function (item, item3) {

            item.ciAttr = item3.proName;

        }
        //缺省保存
        $scope.saveDefaultRuleFun = function (flag) {

            var ciMatches = [];
            $.each($scope.defaultCIData, function (index, item) {
                if (item.Civalue) {
                    var ciMatch = {};
                    ciMatch.matchType = 0;
                    ciMatch.eventAttr = item.value;
                    ciMatch.ciAttr = item.Civalue;

                    ciMatches.push(ciMatch);
                }
            })

            MonitoringService.saveRule({
                id: $scope.ruleId,
                name: $scope.objs.newRuleFatherName,
                ruleType: 12,
                active: flag,
                priority: 1,
                description: $scope.objs.newRuleFatherName,
                action: { 'ciMatches': ciMatches }



            }).success(function (result) {
                Unit.success(L.get('COMMON_SAVED_SUCCESSFULLY'));
                $scope.freshFlag = !$scope.freshFlag;
                $scope.ruleDetailFlag = true;
            }).error(function () {
                Unit.error(L.get('COMMON_SAVE_FAILED'));
            });

            $scope.objs.userDefined = false;
        }
        //规则描述框内容返显

        $scope.copyValueFun = function (rules) {
            // if($scope.objs.ruleDetail!=''){
            // 	return
            // }
            $scope.andObj = L.get('EMV_FILER_EVENT_RANGE')+':';
            for (var i = 0; i < rules.length; i++) {
                for (var j = 0; j < rules[i].length; j++) {
                    //console.log($scope.rules[i][j].value)
                    if (j == rules[i].length - 1) {
                        $scope.andObj += rules[i][j].propertyDesc + rules[i][j].operatorDesc + rules[i][j].value;
                    } else {
                        $scope.andObj += rules[i][j].propertyDesc + rules[i][j].operatorDesc + rules[i][j].value + ' ' + L.get('COMMON_AND') + ' ';
                    }

                }
                if (i < rules.length - 1) {
                    $scope.andObj += ' ' + L.get('COMMON_OR') + ' ';
                }

            }
            $scope.objs.ruleDetail = $scope.andObj;
        }




        $scope.$on('rules', function (event, data) {
            $scope.rules = data;//接受值
            //$scope.copyValueFun();
        });
        $scope.$on('ruleDetail', function (event, data) {
            $scope.objs.ruleDetail = data;//接受值
        });
        $scope.$on('freshFlag', function (event, data) {
            $scope.freshFlag = data;//接受值
        });
        $scope.$on('copyFlag', function (event, data) {
            $scope.copyFlag = data;
        })
        $scope.$on('saveCopyId', function (event, data) {
            $scope.saveId = data;
            $scope.$broadcast('saveId', $scope.saveId);
        })
        //保存调接口函数
        $scope.saveLastFun = function (flag) {
            //获取过滤策略值
            $.each($scope.enrichStrategyArr, function (index, item) {
                if (item.getCiAttrDefs) {
                    delete item.getCiAttrDefs
                }
            })
            //console.log($scope.enrichStrategyArr)
            var selectorList = [];
            $.each($scope.rules, function () {
                var json = {};
                json.selectors = this;
                selectorList.push(json);
            });
            var checkStingLong = JSON.stringify(selectorList);
            if (checkStingLong.length > 4096) {
                Unit.error(L.get('EMV_FILTER_CONDITION_CHARACTER_LENGTH_CANNOT_EXCEED')+'4000')
                return false;
            }
            if ($scope.objs.ruleDetail.length > 512) {
                Unit.error(L.get('EMV_DESCRIPTION_CHARACTER_LENGTH_CANNOT_EXCEED')+'500')
                return false;
            }
            MonitoringService.saveRule({
                id: $scope.ruleId,
                name: $scope.objs.newRuleFatherName,
                ruleType: '12',
                active: flag,
                priority: 1,
                description: $scope.objs.ruleDetail,
                selectorList: selectorList,
                action: { ciMatches: $scope.enrichStrategyArr },
                sourceIdList: $scope.sourceId



            }).success(function (result) {
                if (result.success) {
                    Unit.success(L.get('COMMON_SAVED_SUCCESSFULLY'));
                    $scope.freshFlag = !$scope.freshFlag;
                    $scope.$broadcast('saveId', result.data);
                } else {
                    Unit.error(L.get('COMMON_SAVE_FAILED'));
                    $scope.$broadcast('saveId', result.data);
                }

            })
            $scope.ruleDetailFlag = true;

        }

        //保存校验
        $scope.saveFun = function (flag) {

            $.each($scope.enrichStrategyArr, function (index, item) {

                if (item.ciShow == true) {
                    item.matchType = 1;
                } else if (item.defindeShow == true) {
                    item.matchType = 2;
                    delete item.ciClassId;
                    delete item.ciAttr;
                }

            })
            //console.log($scope.enrichStrategyArr)
            //console.log($scope.source)
            if (!$scope.objs.newRuleFatherName) {
                Unit.error(L.get('COMMON_RULE_NAME_CANNOT_BE_EMPTY'))
                return false;
            }
            if ($scope.sourceId == null) {
                Unit.error(L.get('EMV_THE_SOURCE_OF_THE_EVENT_CANNOT_BE_UNSELECTED'))
                return false;
            }
            //console.log($scope.enrichStrategyArr[0])
            if (!$scope.enrichStrategyArr[0].eventAttr) {
                Unit.error(L.get('EMV_RICH_FIELDS_CANNOT_BE_EMPTY'))
                return false;
            }
            if (!$scope.enrichStrategyArr[0].ciShow && !$scope.enrichStrategyArr[0].defindeShow) {
                Unit.error(L.get('EMV_PLEASE_CHOOSE_A_RICH_WAY'))
                return false;
            }
            if ($scope.enrichStrategyArr[0].ciShow && !$scope.enrichStrategyArr[0].ciClassId) {
                Unit.error(L.get('COMMON_PLEASE_SELECT_CI')+L.get('EMV_CLASSIFICATION'))
                return false;
            }
            if ($scope.enrichStrategyArr[0].ciShow && !$scope.enrichStrategyArr[0].ciAttr) {
                Unit.error(L.get('COMMON_PLEASE_SELECT_CI')+L.get('COMMON_ATTRIBUTES'))
                return false;
            }
            if ($scope.ruleId) {
                MonitoringService.checkRuleName({
                    name: $scope.objs.newRuleFatherName,
                    id: $scope.ruleId,
                    ruleType: 12
                }).success(function (result) {
                    if (result.success) {
                        $scope.saveLastFun(flag);
                    } else {
                        Unit.error(L.get('EMV_RULE_NAME_ALREADY_EXISTS'))
                    }
                })
            } else {
                MonitoringService.checkRuleName({
                    name: $scope.objs.newRuleFatherName,
                    ruleType: 12
                }).success(function (result) {
                    if (result.success) {
                        $scope.saveLastFun(flag);
                    } else {
                        Unit.error(L.get('EMV_RULE_NAME_ALREADY_EXISTS'))
                    }
                })
            }



        }
        //取消按钮
        $scope.cancelFun = function () {
            $scope.ruleDetailFlag = true;
            $scope.objs.userDefined = false;
            $scope.objs.unuserDefined = false;
        }


        // 自定义下拉框
        $('.environment-edit-wrap').on('click', '.select-wrap', function (event) {
            event.stopPropagation();
            $(this).find('.drop-menu').stop().slideToggle(150);
            $(this).find('input').toggle();

        });
        $('.environment-edit-wrap').on('click', '.select-wrap1', function (event) {
            event.stopPropagation();
            $(this).find('.drop-menu1').stop().slideToggle(150);

        });
        $('.environment-edit-wrap').on('click', '.drop-menu li', function () {
            var ele = $(this).parent().siblings('.select-choice');
            ele.html($(this).html());
        });
        $(document).on('click', function () {
            $('.select-wrap').find('.drop-menu').stop().slideUp(150);
            $('.select-wrap1').find('.drop-menu1').stop().slideUp(150);
            $('.search-inp').hide();
            $scope.$broadcast('importFlag', false);
            $scope.objs.listShowFlag = false;
            if (!$scope.$$phase) {
                $scope.$apply();
            }
            $scope.lineLong()
        });


        // 拖拽缩放功能
        var parentW;
        $timeout(function () {
            parentW = $('.preview-wrapper').width() / 0.4;
        }, 1);

        $('.drag-scale').bind('mousedown', function (e) {
            var dragW = $('.drag-scale').width() + 2;
            var leftW = $('.preview-wrapper').width();
            var disX = e.pageX;

            $(document).bind('mousemove', function (e) {
                var _disX = e.pageX;
                var _leftW = leftW + (_disX - disX);
                var marginLeft = leftW + (_disX - disX) + dragW;

                if (_leftW < 400) {
                    _leftW = 400;
                    marginLeft = 400 + dragW;
                }

                if (_leftW > (parentW - 500 - dragW)) {
                    _leftW = parentW - 500 - dragW;
                    marginLeft = _leftW + dragW;
                }

                $('.preview-wrapper').width(_leftW);
                $('.environment-edit-wrap').css('margin-left', marginLeft);
            });

            $(document).bind('mouseup', function () {
                $(document).unbind('mousemove');
                $(document).unbind('mouseup');
            });

            return false;
        });

    }]);
	/*
	 * 高亮搜索关键词
	 * @param: 文本内容
	 * @param： 搜索关键词
	 * html标签中使用指令 ng-bind-html
	 */
    graph.app.filter('highlightWord', ['$sce', function ($sce) {
        return function (text, keyword) {
            if (!keyword) {
                return $sce.trustAsHtml(text);
            }
            text = encodeURI(text);
            keyword = encodeURI(keyword);

            var reg = new RegExp(keyword, 'gi')
            var result = text.replace(reg, '<span class="highlightedText">$&</span>');
            result = decodeURI(result);
            return $sce.trustAsHtml(result);
        }
    }]);
    graph.app.filter('selectCI', function () {
        return function (input, arr) {
            var classCode = '';
            angular.forEach(arr, function (item, index) {
                if (item.id === input) {
                    classCode = item.classCode;
                }
            });
            return classCode
        }
    })
    graph.app.filter('selectCIAttr', function () {
        return function (input, arr) {
            var proName = '';
            angular.forEach(arr, function (item, index) {
                if (item.proName === input) {
                    proName = item.proName;
                }
            });
            return proName
        }
    })

})(nameSpace.reg('graph'));

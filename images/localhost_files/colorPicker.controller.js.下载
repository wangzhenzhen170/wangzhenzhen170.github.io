(function() {

	'use strict';

	var app = angular.module('ui.colorPicker', []);

	app.controller('uColorPickerCtrl', ['$scope', '$element', '$timeout', 'ToolbarAction',
		function($scope, element, $timeout, ToolbarAction) {
			var editor = $scope.params.editor;
			var choice = $scope.choice;
			var ac=editor.toolbar.tbAction;
			$scope.L = L;
			var language_map = {
				'zh': {
					'default_color': $scope.L.get('COMMON_DEFAULT_COLOR'),
					'latest_used': $scope.L.get('COMMON_RECENTLY_USED'),
					'theme_color': $scope.L.get('COMMON_THEME_COLOR'),
					'standard_color': $scope.L.get('COMMON_STANDARD_COLOR'),
					'more_color': $scope.L.get('COMMON_OTHER_COLOURS')+'..'
				},
				'en': {
					'default_color': 'default',
					'latest_used': 'latest used',
					'theme_color': 'theme color',
					'standard_color': 'standard color',
					'more_color': 'more..'
				}
			};
			var defaultLang = $scope.language || 'zh';
			var localize = {
				get: function(key) {
					if(language_map[defaultLang].hasOwnProperty(key)) {
						return language_map[defaultLang][key];
					}
					console.warn('Missing lang pair for : ', key);
					return '';
				}
			}

			var defaultColor = '#f00';

			var defaultOptions = {
				clearText: localize.get('default_color'),
				defaultColor: defaultColor,
				latestText: localize.get('latest_used'),
				commonText: localize.get('theme_color'),
				commonColor: [
					[
						'#ffffff', '#000000', '#eeece1', '#1f497d', '#4f81bd',
						'#c0504d', '#9bbb59', '#8064a2', '#4bacc6', '#f79646'
					],
					[
						'#f2f2f2', '#808080', '#ddd8c2', '#c6d9f1', '#dbe5f1',
						'#f2dbdb', '#eaf1dd', '#e5dfec', '#daeef3', '#fde9d9'
					],
					[
						'#d9d9d9', '#595959', '#c4bc96', '#8db3e2', '#b8cce4',
						'#e5b8b7', '#d6e3bc', '#ccc0d9', '#b6dde8', '#fbd4b4'
					],
					[
						'#bfbfbf', '#404040', '#938953', '#548dd4', '#95b3d7',
						'#d99594', '#c2d69b', '#b2a1c7', '#92cddc', '#fabf8f'
					],
					[
						'#a6a6a6', '#262626', '#4a442a', '#17365d', '#365f91',
						'#943634', '#76923c', '#5f497a', '#31849b', '#e36c0a'
					],
					[
						'#7f7f7f', '#0d0d0d', '#1c1a10', '#0f243e', '#243f60',
						'#622423', '#4e6128', '#3f3151', '#205867', '#974706'
					]
				],
				standardText: localize.get('standard_color'),
				standardColor: [
					'#c00000', '#ff0000', '#ffc000', '#ffff00', '#92d050',
					'#00b050', '#00b0f0', '#0070c0', '#002060', '#7030a0'
				],
				moreText: localize.get('more_color')
			};
			// 生成元素随机ID
			$scope.pickerInputId = (+new Date() * 1e6 + Math.floor(Math.random() * 1e6)).toString(36);

			var $ = angular.element;
			var colorpickerEle = $('.colorpicker-container');

			$scope.defaultOptions = defaultOptions;

			$scope.isSupportNativeColorPicker = isSupportNativeColorPicker();

			$scope.latestColor = getLatestColor();

			$scope.hoveredColor = defaultOptions.defaultColor;
			// 鼠标悬浮颜色块预览
			$scope.previewColor = function(color) {
				$scope.hoveredColor = color;
			};

			$scope.selectColorView = function(color,$event) {
				$scope.hoveredColor = color;

				if (choice === 'setCellColor') {
					ac.setCellColor(color);
				}

				if (choice === 'setStrokeColor') {
					ac.setStrokeColor(color);
				}

				if (choice === 'setFontColor') {
					ac.setFontColor(color);
				}

				if (choice === 'setEdgeColor') {
					ac.setEdgeColor(color);
				}

				if (choice === 'setBackgroundColor') {
					ac.setBackgroundColor(color);
				}
				// 设置'最近使用颜色'
				setLatestColor(color);
				$scope.latestColor = getLatestColor();
			}

			// 浏览器特性检测
			function isSupportNativeColorPicker() {
				var i = document.createElement('input');
				i.setAttribute('type', 'color');

				return i.type !== 'text';
			}

			/**
			 * 获取 UIMemory对象
			 * @returns {object} uiMemory 对象
			 */
			function getUIMemory() {
				var uiMemory = window.localStorage.getItem('ui-color-picker');
				if(!uiMemory) {
					return null;
				}
				try {
					uiMemory = JSON.parse(uiMemory)
				} catch(e) {
					return null;
				}
				return uiMemory;
			}
			// 获取最近使用颜色
			function getLatestColor() {
				var uiMemory = getUIMemory();
				return uiMemory ? uiMemory.latestColor : [];
			}
			// 设置最近使用颜色
			function setLatestColor(color) {
				var uiMemory = getUIMemory() || {};
				var latest = getLatestColor();

				if(latest && latest instanceof Array) {
					var idx = latest.indexOf(color);
					if(idx != -1) {
						latest.splice(idx, 1);
					}
					latest.unshift(color);
				} else {
					latest = [color];
				}
				if(latest.length > 10) {
					latest = latest.slice(0, 10);
				}
				uiMemory.latestColor = latest;
				window.localStorage.setItem('ui-color-picker', JSON.stringify(uiMemory));
			}
		}
	]);

	app.directive('uColorPicker', ['$compile', function($compile) {
		return {
			restrict: 'EA',
			replace: true,
			templateUrl: 'app/directive/colorPicker/colorPicker.html',
			scope: true,
			controller: 'uColorPickerCtrl',
			link: function(scope, element, attrs) {

			}
		};

	}]);

})(nameSpace.reg('graph'));

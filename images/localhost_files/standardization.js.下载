/**
 * Created by Administrator on 2017/6/6.
 */
(function (graph) {

    'use strict';

    graph.app.controller('standardizationCtrl', ['$scope', '$state', '$timeout', 'MonitoringService', '$uibModal', 'Unit', 'uDialog', '$stateParams', function ($scope, $state, $timeout, MonitoringService, $uibModal, Unit, uDialog, $stateParams) {
        $scope.stateParamsObj = {};
        $scope.stateParamsObj = $stateParams;
        $scope.typeName = $stateParams.name;
        $scope.ruleType = 1;
        $scope.objs = {};
        $scope.ruleDetailFlag = true;
        $scope.mdelObj = { 'function': true, ruleType: $scope.ruleType };
        $scope.mdelObj.except = ['SUMMARY', 'EVENTTITLE', 'CICATEGORYNAME', 'CINAME'];
        $scope.mdelObj.default = 'SOURCECINAME';
        $scope.freshFlag = false;


        $scope.defineTime = [
            { name: L.get('EMV_EVENT_TABLE_ORIGINAL_TIME'), value: 0 },
            { name: L.get('EMV_EVENT_STATION_RECEIVES_EVENT_TIME'), value: 1 },
        ];

        $scope.selectLevel = function (value) {
            $scope.levelVal = value.value;
        }

        $scope.selectdefineTime = function (value) {
            $scope.defineTimeVal = value.value;
        }


        //获取邮件通知人信息
        $scope.queryUserFun = function () {
            MonitoringService.userList({}).success(function (result) {
                if (result.success) {
                    $scope.personArray = result.data
                } else {
                    Unit.error(L.get('EMV_INTERFACE_DATA_REQUEST_IS_NOT_AVAILABLE'))
                }

            })
        }


        $scope.mailContentString = '';
        $scope.mailContentFun = function (e, flag) {
            var keycode = window.event ? e.keyCode : e.which; //获取按键编码
            if ((window.event.shiftKey) && (keycode == 52 || keycode == 229)) {
                e.preventDefault();
                if (flag == 'mail') {
                    $scope.mailContentFlag = true;
                    $timeout(
                        function () {
                            $($('.mail-notice .mailContentli')[0]).addClass('active');
                        }, 2
                    )
                }
                if (flag == 'title') {
                    $scope.titleContentFlag = true;
                    $timeout(
                        function () {
                            $($('.title-notice .mailContentli')[0]).addClass('active');
                        }, 2
                    )
                }
            } else {
                if (keycode != 13 && keycode != 38 && keycode != 40) {
                    if (flag == 'mail') {
                        $scope.mailContentFlag = false;
                        $timeout(function () {
                            $scope.mailtextareaVal = $('.mail-notice .mailContent').val()
                            $scope.mailContentString = $scope.mailtextareaVal;
                        })
                    }
                    if (flag == 'title') {
                        $scope.titleContentFlag = false;
                        $timeout(function () {
                            $scope.mailtextareaVal = $('.title-notice .mailContent').val()
                            $scope.titleContentString = $scope.mailtextareaVal;
                        })
                    }


                }
            }

            if (keycode === 38) {
                e.preventDefault();
                hintListCtrl($('.mail-notice .mailContentlist'), 'UP');
                hintListCtrl($('.title-notice .mailContentlist'), 'UP');
            } else if (keycode === 40) {
                e.preventDefault();
                hintListCtrl($('.mail-notice .mailContentlist'), 'DOWN');
                hintListCtrl($('.title-notice .mailContentlist'), 'DOWN');
            }
            if (keycode == 13) {
                e.preventDefault();
                if (flag == 'mail') {
                    $scope.mailContentString += '${' + $('.mail-notice .mailContentlist .active span').text() + '}';
                    $('.mail-notice .mailContent').val($scope.mailContentString)
                    $('.mail-notice .mailContentli').removeClass('active')
                    $scope.mailContentFlag = false;
                }
                if (flag == 'title') {
                    $scope.titleContentString += '${' + $('.title-notice .mailContentlist .active span').text() + '}';
                    $('.title-notice .mailContent').val($scope.titleContentString)
                    $('.title-notice .mailContentli').removeClass('active')
                    $scope.titleContentFlag = false;
                }

            }

        }

        $scope.checkedInforFun = function (li, flag) {
            if (flag == 'mail') {
                $scope.mailContentString += li.display;
                $('.mail-notice .mailContent').val($scope.mailContentString)
                $('.mail-notice .mailContentli').removeClass('active')
                $scope.mailContentFlag = false;
            }
            if (flag == 'title') {
                $scope.titleContentString += li.display;
                $('.title-notice .mailContent').val($scope.titleContentString)
                $('.title-notice .mailContentli').removeClass('active')
                $scope.titleContentFlag = false;
            }

        }
        function hintListCtrl(hint_wrap, direction) {
            var hint_List = hint_wrap.find('.mailContentli'),
                hint_Active = hint_wrap.find('.mailContentli.active');
            var wrapHeight = hint_wrap.height();
            if (hint_List.hasClass('active')) {
                var length = hint_List.length;
                var index = hint_Active.index();
                if (direction === 'UP') {
                    index === 0 ? index = length - 1 : index--;
                } else if (direction === 'DOWN') {
                    index === length - 1 ? index = 0 : index++;
                }
                hint_List.removeClass('active');
                var select_hint = hint_List.eq(index);
                select_hint.addClass('active');
                var posTop = select_hint.position().top;
                var childrenHeight = hint_Active.height();
                var srcollTop = hint_wrap.scrollTop();
                posTop >= wrapHeight ? hint_wrap.scrollTop(srcollTop + posTop - wrapHeight + childrenHeight) : '';
                posTop <= 0 ? hint_wrap.scrollTop(srcollTop + posTop) : '';
            } else {
                if (direction === 'UP') {
                    hint_List.last().addClass('active');
                } else if (direction === 'DOWN') {
                    hint_List.first().addClass('active');
                }
            }
        }


        //设置左侧顺序线的长度
        $scope.lineLong = function () {
            $timeout(function () {
                var height = angular.element('.content-following5').height();
                angular.element('.step-line1').height(height);
                var height2 = angular.element('.content-following1').height();
                angular.element('.step-line2').height(height2);
                var height3 = angular.element('.content-following2').height();
                angular.element('.step-line3').height(height3);
            }, 10);
        };

        //页面滚动条回到初始位置
        $scope.topFun = function () {
            $('.content').animate({
                scrollTop: 0
            }, 300);
        }
        $scope.$on('ruleTitleName', function (event, data) {
            $scope.objs.newRuleFatherName = data;
        })

        //弹出添加页面
        $scope.ruleDetailFun = function (ruleDetail, name) {
            //$scope.freshFlag=false;
            $scope.rules = [];//筛选规则
            $scope.mailContentString = '';//邮件的详细内容
            $scope.mailContentFlag = false;//邮件通知方式
            $scope.titleContentString = '';//事件标题的详细内容
            $scope.titleContentFlag = false;//事件标题

            $scope.levelVal = -1;
            $scope.defineTimeVal = 0;
            $scope.topFun();
            MonitoringService.getModelCode($scope.mdelObj).success(function (result) {
                if (result.success) {
                    $scope.classList = result.data;
                    MonitoringService.getSelectorCodes({ 'codeType': 0, 'add': [{ 'name': L.get('EMV_KEEP_THE_ORIGINAL_EVENT_LEVEL'), 'value': -1, 'codeType': 0 }] }).success(function (result) {
                        if (result.success) {
                            $scope.level = result.data;
                            MonitoringService.userList({}).success(function (result) {
                                if (result.success) {
                                    $scope.personArray = result.data;
                                    if (ruleDetail) {
                                        $scope.removeButton = true;//修改时显示右上角删除按钮
                                        $scope.ruleId = ruleDetail.id;
                                        MonitoringService.getRuleById({
                                            'id': ruleDetail.id
                                        }).success(function (result) {
                                            if (result.success) {
                                                $scope.result = result.data;
                                                $scope.objs.newRuleFatherName = ruleDetail.name;
                                                $scope.objs.ruleDetail = $scope.result.description;
                                                $scope.sourceId = $scope.result.sourceIdList;
                                                if ($scope.result.selectorList) {
                                                    $.each($scope.result.selectorList, function () {
                                                        $scope.rules.push(this.selectors)
                                                    });
                                                }

                                                $scope.mailContentString = $scope.result.action.summary;
                                                $scope.levelVal = $scope.result.action.severity;
                                                $('.mail-notice .mailContent').val($scope.result.action.summary);

                                                $scope.titleContentString = $scope.result.action.eventTitle;
                                                $('.title-notice .mailContent').val($scope.result.action.eventTitle);

                                                if (!$scope.$$phase) {
                                                    $scope.$apply();
                                                }
                                                $scope.defineTimeVal = $scope.result.duration;
                                                $scope.ruleDetailFlag = false;
                                                $timeout(function () {
                                                    $scope.lineLong();
                                                    $scope.$broadcast('sourceId', $scope.sourceId);
                                                    $scope.$broadcast('rules', $scope.rules);
                                                    $scope.$broadcast('ruleId', $scope.ruleId);
                                                    $scope.$broadcast('freshFlag', $scope.freshFlag)
                                                    $scope.$broadcast('removeButton', $scope.removeButton);
                                                    $scope.$broadcast('sourceIdArray', $scope.sourceId);

                                                },300)
                                            } else {
                                                Unit.error(L.get('EMV_INTERFACE_DATA_REQUEST_IS_NOT_AVAILABLE'))
                                            }


                                        })
                                    } else {

                                        $scope.sourceId = [];
                                        $timeout(function () {
                                            $('#newNameInput').focus();
                                        }, 2)
                                        $scope.removeButton = false;

                                        $scope.rules = [
                                            [
                                                {
                                                    property: $scope.classList[0].name,
                                                    operator: '==',
                                                    value: '*',
                                                    propertyDesc: $scope.classList[0].alias,
                                                    operatorDesc: L.get('EMV_EQUAL')
                                                }
                                            ]

                                        ];
                                        $scope.objs.newRuleFatherName = '';
                                        $scope.ruleId = '';
                                        $scope.objs.ruleDetail = '';
                                        $scope.titleContentString = '';//邮件的详细内容
                                        $scope.titleContentFlag = false;//邮件通知方式
                                        $scope.mailContentString = '';//邮件的详细内容
                                        $scope.mailContentFlag = false;//邮件通知方式
                                        $('.mail-notice .mailContent').val('');
                                        $('.title-notice .mailContent').val('');
                                        $scope.copyValueFun($scope.rules);
                                        $scope.ruleDetailFlag = false;
                                        $timeout(function () {
                                            $scope.lineLong();
                                            $scope.$broadcast('sourceId', $scope.sourceId);
                                            $scope.$broadcast('rules', $scope.rules);
                                            $scope.$broadcast('ruleId', $scope.ruleId);
                                            $scope.$broadcast('freshFlag', $scope.freshFlag)
                                            $scope.$broadcast('removeButton', $scope.removeButton);
                                            $scope.$broadcast('sourceIdArray', $scope.sourceId)

                                        }, 2)
                                    }
                                } else {
                                    Unit.error(L.get('EMV_INTERFACE_DATA_REQUEST_IS_NOT_AVAILABLE'))
                                }

                            })
                        } else {
                            Unit.error(L.get('EMV_INTERFACE_DATA_REQUEST_IS_NOT_AVAILABLE'))
                        }


                    })
                } else {
                    Unit.error(L.get('EMV_INTERFACE_DATA_REQUEST_IS_NOT_AVAILABLE'))
                }



            })



        }








        //规则描述框内容返显
        $scope.copyValueFun = function (rules) {

            $scope.andObj = L.get('EMV_FILER_EVENT_RANGE')+':';
            for (var i = 0; i < rules.length; i++) {
                for (var j = 0; j < rules[i].length; j++) {
                    //console.log($scope.rules[i][j].value)
                    if (j == rules[i].length - 1) {
                        $scope.andObj += rules[i][j].propertyDesc + rules[i][j].operatorDesc + rules[i][j].value;
                    } else {
                        $scope.andObj += rules[i][j].propertyDesc + rules[i][j].operatorDesc + rules[i][j].value + ' ' + L.get('COMMON_AND') + ' ';
                    }

                }
                if (i < rules.length - 1) {
                    $scope.andObj += ' ' + L.get('COMMON_OR') + ' ';
                }

            }
            $scope.objs.ruleDetail = $scope.andObj;
        }



        $scope.showSlectFun = function () {
            $('.select-choice1').css('border-color', '#ddd');
        }
        $scope.bornewNameFun = function () {
            $('.new-name').css('border-color', '#ddd');
        }

        //保存调接口函数
        $scope.saveLastFun = function (flag) {
            var selectorList = [];
            $.each($scope.rules, function () {
                var json = {};
                json.selectors = this;
                selectorList.push(json);
            });
            var checkStingLong = JSON.stringify(selectorList);
            if (checkStingLong.length > 4096) { Unit.error(L.get('EMV_FILTER_CONDITION_CHARACTER_LENGTH_CANNOT_EXCEED')+'4000')
                return false;
            }
            if ($scope.objs.ruleDetail.length > 512) {
              Unit.error(L.get('EMV_DESCRIPTION_CHARACTER_LENGTH_CANNOT_EXCEED')+'500')
                return false;
            }
            MonitoringService.saveRule({
                'id': $scope.ruleId,
                'name': $scope.objs.newRuleFatherName,
                'ruleType': '1',
                'active': flag,
                'priority': 1,
                'description': $scope.objs.ruleDetail,
                'selectorList': selectorList,
                'duration': $scope.defineTimeVal,
                'action': {
                    'eventTitle': $scope.titleContentString,
                    'summary': $scope.mailContentString,
                    'severity': $scope.levelVal


                },
                'sourceIdList': $scope.sourceId
            }).success(function (result) {
                Unit.success(L.get('COMMON_SAVED_SUCCESSFULLY'));
                $scope.freshFlag = !$scope.freshFlag;
                $scope.$broadcast('saveId', result.data);
            }).error(function () {
              Unit.error(L.get('COMMON_SAVE_FAILED'));
                $scope.$broadcast('saveId', result.data);
            });
            $scope.ruleDetailFlag = true;
        }

        //保存
        $scope.saveFun = function (flag) {

            if ($scope.sourceId == null) {
                Unit.error(L.get('EMV_THE_SOURCE_OF_THE_EVENT_CANNOT_BE_UNSELECTED'))
                return false;
            }
            $scope.eventTitle = $('.select-choice1').text();

            if ($scope.titleContentString.length == 0) {
                Unit.error(L.get('EMV_EVENT_TITLE_CANNOT_BE_EMPTY'))
                return false;
            }
            if ($scope.mailContentString.length == 0) {
                Unit.error(L.get('EMV_EVENT_CONTENT_CANNOT_BE_EMPTY'))
                return false;
            }
            if (!$scope.objs.newRuleFatherName) {
                Unit.error(L.get('COMMON_RULE_NAME_CANNOT_BE_EMPTY'))
                return false;
            }
            if ($scope.ruleId) {
                MonitoringService.checkRuleName({
                    'name': $scope.objs.newRuleFatherName,
                    'id': $scope.ruleId,
                    'ruleType': 1
                }).success(function (result) {
                    if (result.success == true) {
                        $scope.saveLastFun(flag);
                    } else {
                        Unit.error(L.get('EMV_RULE_NAME_ALREADY_EXISTS'))
                    }
                })
            } else {
                MonitoringService.checkRuleName({
                    'name': $scope.objs.newRuleFatherName,
                    'ruleType': 1
                }).success(function (result) {
                    if (result.success == true) {
                        $scope.saveLastFun(flag);
                    } else {
                      Unit.error(L.get('EMV_RULE_NAME_ALREADY_EXISTS'))
                    }
                })
            }



        }
        //取消按钮
        $scope.cancelFun = function () {
            $scope.ruleDetailFlag = true;
        }


        // 自定义下拉框
        $('.environment-edit-wrap').on('click', '.select-wrap', function (event) {
            event.stopPropagation();
            $(this).find('.drop-menu').stop().slideToggle(150);

        });
        $('.environment-edit-wrap').on('click', '.select-wrap1', function (event) {
            event.stopPropagation();
            $(this).find('.drop-menu1').stop().slideToggle(150);

        });

        $(document).on('click', function () {
            $('.select-wrap').find('.drop-menu').stop().slideUp(150);
            $scope.$broadcast('importFlag', false);
            $('.select-wrap1').find('.drop-menu1').stop().slideUp(150);
            $scope.objs.listShowFlag = false;
            $scope.titleContentFlag = false;
            $scope.mailContentFlag = false;
            if (!$scope.$$phase) {
                $scope.$apply();
            }
            $scope.lineLong();
        });


        $scope.$on('rules', function (event, data) {
            $scope.rules = data;//接受值
        });
        $scope.$on('ruleDetail', function (event, data) {
            $scope.objs.ruleDetail = data;//接受值
        });
        $scope.$on('freshFlag', function (event, data) {
            $scope.freshFlag = data;//接受值
        });
        $scope.$on('sourceId', function (event, data) {
            $scope.sourceId = data;
            $scope.$broadcast('sourceIdArray', $scope.sourceId)
        })
        $scope.$on('copyFlag', function (event, data) {
            $scope.copyFlag = data;
        })
        $scope.$on('saveCopyId', function (event, data) {
            $scope.saveId = data;
            $scope.$broadcast('saveId', $scope.saveId);
        })
        // 拖拽缩放功能
        var parentW;
        $timeout(function () {
            parentW = $('.preview-wrapper').width() / 0.4;
        }, 1);

        $('.drag-scale').bind('mousedown', function (e) {
            var dragW = $('.drag-scale').width() + 2;
            var leftW = $('.preview-wrapper').width();
            var disX = e.pageX;

            $(document).bind('mousemove', function (e) {
                var _disX = e.pageX;
                var _leftW = leftW + (_disX - disX);
                var marginLeft = leftW + (_disX - disX) + dragW;

                if (_leftW < 400) {
                    _leftW = 400;
                    marginLeft = 400 + dragW;
                }

                if (_leftW > (parentW - 500 - dragW)) {
                    _leftW = parentW - 500 - dragW;
                    marginLeft = _leftW + dragW;
                }

                $('.preview-wrapper').width(_leftW);
                $('.environment-edit-wrap').css('margin-left', marginLeft);
            });

            $(document).bind('mouseup', function () {
                $(document).unbind('mousemove');
                $(document).unbind('mouseup');
            });

            return false;
        });

    }]);

    graph.app.filter('select', function () {
        return function (input, arr) {
            var name = '';
            angular.forEach(arr, function (item, index) {
                if (item.value === input) {
                    name = item.name;
                }
            });
            return name
        }
    })


})(nameSpace.reg('graph'));
